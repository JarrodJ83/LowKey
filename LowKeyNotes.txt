
# Key Terminology

## DataStore: A named data store. For example:
* A database: "myapp-db"
* A cache: "myapp-cache"

## Tenant: A simple name of a Tenant. For example:
* "customer-1", "customer-2, "customer-10"
" "us", "eu"

## Client: The client that will be used to access the data store. For example:
* DbContext
* DbConnection

## Multi-Tenancy Considerations

* Tenants need resolved per data store. For example if the application has a database and cache, those could resolve to different servers



services.AddLowKey(lowkey => 
{
    // Configure a single store and a single client
    lowkey
        .ConfigureStore(new DataStore("sqldb"), server: "server:453").UsingSqlClient();

    // Configure a single store and a single client w/ multiple tenants
    lowkey
        .ConfigureStore(new DataStore("multi-tenant-postgres"))
        .WithTenantResolver<MySqlDbTenantResolver>()
        .UsingNpgsql();

    // Configure a single store and a single client
    lowkey
        .ConfigureStore(new DataStore("sqldb"))
        .UsingSqlClient(new SqlConnectionStringBuilder());

    // Configure a single store and a single client w/ multiple tenants
    lowkey
        .ConfigureStore(new DataStore("sqldb"))
        .WithTenantResolver<MySqlDbTenantResolver>()
        .UsingSqlClient(new SqlConnectionStringBuilder());

    
})


1. Lookup client factory for data store
2. Lookup tenant
3. Create client for tenant
4. Execute



